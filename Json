{
  "users": {
    "123456": {
      "balance": 10,
      "referrals": ["654321", "789012"],
      "last_bonus_claimed": "2025-05-01"
    },
    "654321": {
      "balance": 5,
      "referrals": [],
      "last_bonus_claimed": "2025-05-02"
    }
  }
}import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import logging
from datetime import datetime

# Налаштування логування
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Токен вашого бота
TOKEN = 'YOUR_BOT_API_TOKEN'

# Шлях до файлу JSON
DATA_FILE = 'user_data.json'

def load_data():
    """Завантаження даних з файлу JSON"""
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": {}}

def save_data(data):
    """Збереження даних у файл JSON"""
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def get_balance(user_id, data):
    """Отримання балансу користувача"""
    user_id = str(user_id)
    if user_id in data["users"]:
        return data["users"][user_id]["balance"]
    return 0

def set_balance(user_id, balance, data):
    """Оновлення балансу користувача"""
    user_id = str(user_id)
    if user_id not in data["users"]:
        data["users"][user_id] = {"balance": 0, "referrals": [], "last_bonus_claimed": ""}
    data["users"][user_id]["balance"] = balance
    save_data(data)

def start(update: Update, context: CallbackContext):
    """Стартова команда"""
    user = update.message.from_user
    data = load_data()
    user_id = user.id
    balance = get_balance(user_id, data)
    update.message.reply_text(
        f"Привіт, {user.first_name}! Твій баланс: {balance} Lumis Coin.\nГотовий майнити? Натискай 'Майнити' для початку.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Майнити", callback_data='mine')]])
    )

def mine(update: Update, context: CallbackContext):
    """Обробка натискання кнопки майнінгу"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    data = load_data()
    current_balance = get_balance(user_id, data)
    new_balance = current_balance + 1  # Збільшуємо баланс на 1 монету
    set_balance(user_id, new_balance, data)
    
    query.edit_message_text(f"Ти майниш Lumis Coin! Твій новий баланс: {new_balance} Lumis Coin.",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Майнити", callback_data='mine')]]))

def main():
    """Запуск бота"""
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(mine, pattern='^mine$'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
